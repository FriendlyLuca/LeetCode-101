class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q=new LinkedList<int[]>();
        HashSet<Integer> fr=new HashSet<>();
        int min=0;
        for (int i=0;i<grid.length;i++){
            for (int j=0;j<grid[0].length;j++){
                if (grid[i][j]==1){
                    fr.add(11*i+j);
                }else if (grid[i][j]==2){
                    q.offer(new int[]{i,j});
                }
            }
        }
        System.out.println(q);
        System.out.println(fr);
        while(!q.isEmpty()&&!fr.isEmpty()){
            min++;
            int size=q.size();
            for (int i=0;i<size;i++){
                int[] temp=q.poll();
                int r=temp[0];
                int c=temp[1];
                if (r>0&&fr.contains((r-1)*11+c)){
                    fr.remove((r-1)*11+c);
                    grid[r-1][c]=2;
                    q.offer(new int[]{r-1,c});
                }
                if (c>0&&fr.contains(r*11+c-1)){
                    fr.remove(r*11+c-1);
                    grid[r][c-1]=2;
                    q.offer(new int[]{r,c-1});
                }
                if (r<grid.length-1&&fr.contains((r+1)*11+c)){
                    fr.remove((r+1)*11+c);
                    grid[r+1][c]=2;
                    q.offer(new int[]{r+1,c});
                }
                if (c<grid[0].length-1&&fr.contains(r*11+c+1)){
                    fr.remove(r*11+c+1);
                    grid[r][c+1]=2;
                    q.offer(new int[]{r,c+1});
                }
            }
        }
        if (fr.isEmpty()){
            return min;
        }else
            return -1;
    }
}
