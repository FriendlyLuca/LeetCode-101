class Solution {
    public int numIslands(char[][] grid) {
        int num=0;
        int[][] visited=new int[grid.length][grid[0].length];
        for (int i=0;i<grid.length;i++){
            for (int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1'&&visited[i][j]==0){
                    num++;
                    bfs(grid,i,j,visited);
                }
            }
        }
        return num;
    }
    void bfs(char[][] grid,int x,int y,int[][] visited){
        Queue<Integer> q=new LinkedList<Integer>();
        q.offer(x*1000+y);
        visited[x][y]=1;
        while(!q.isEmpty()){
            int temp=q.poll();
            int r=temp/1000;
            int c=temp%1000;
            System.out.println(r+" "+c);
            if (r>0&&visited[r-1][c]==0&&grid[r-1][c]=='1'){
                q.offer((r-1)*1000+c);
                visited[r-1][c]=1;
            }
            if (c>0&&visited[r][c-1]==0&&grid[r][c-1]=='1'){
                q.offer(r*1000+c-1);
                visited[r][c-1]=1;
            }
            if (r<grid.length-1&&visited[r+1][c]==0&&grid[r+1][c]=='1'){
                q.offer((r+1)*1000+c);
                visited[r+1][c]=1;
            }
            if (c<grid[0].length-1&&visited[r][c+1]==0&&grid[r][c+1]=='1'){
                q.offer(r*1000+c+1);
                visited[r][c+1]=1;
            }
        }
    }
}
