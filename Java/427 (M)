/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    
    public Node() {
        this.val = false;
        this.isLeaf = false;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = null;
        this.topRight = null;
        this.bottomLeft = null;
        this.bottomRight = null;
    }
    
    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {
        this.val = val;
        this.isLeaf = isLeaf;
        this.topLeft = topLeft;
        this.topRight = topRight;
        this.bottomLeft = bottomLeft;
        this.bottomRight = bottomRight;
    }
};
*/

class Solution {
    public Node construct(int[][] grid) {
        int l=grid.length;
        return cqt(grid,0,0,l);
    }
    private Node cqt(int[][] grid,int x,int y,int l){
        Node node=new Node();
        node.val=grid[x][y]==1;
        node.isLeaf=true;//记得要处理isLeaf属性
        if (!isL(grid,x,y,l)){
            node.isLeaf=false;
            l/=2;
            node.topLeft=cqt(grid,x,y,l);
            node.topRight=cqt(grid,x,y+l,l);
            node.bottomLeft=cqt(grid,x+l,y,l);
            node.bottomRight=cqt(grid,x+l,y+l,l);
        }
        return node;
    }
    private boolean isL(int[][] grid,int x,int y, int l){//判断当前子矩阵是否能当叶子节点
        if (l==1)
            return true;
        int flag=grid[x][y];
        for (int i=0;i<l;i++){
            for (int j=0;j<l;j++){
                if (grid[x+i][y+j]!=flag)
                    return false;
            }
        }
        return true;
    }
}
