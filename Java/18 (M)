// The steps can be as follows —

// Sort the array in time O(n * log n).
// Now for each element i and j, do the following steps —
// Set two pointers left — k = j + 1 and right — l = n - 1.
// Check if nums[i] + nums[j] + nums[k] + nums[l] == target and add it to the result, if true/
// If nums[i] + nums[j] + nums[k] + nums[l] < target, then we are too left, and we need to move right so increment left pointer i.e. k++.
// If nums[i] + nums[j] + nums[k] + nums[l] > target, then we are too right, and we need to decrement the right pointer i.e., l--.

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n=nums.length;
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        for (int i=0;i<n-3;i++){
            if (i>0&&nums[i]==nums[i-1])
                continue;
            for (int j=i+1;j<n-2;j++){
                if (j>i+1&&nums[j]==nums[j-1])
                    continue;
                int l=j+1,r=n-1;
                long s12=nums[i]+nums[j];
                while(l<r){
                    if (nums[l]+nums[r]==target-s12){
                        List<Integer> u=new ArrayList<Integer>();
                        u.add(nums[i]);
                        u.add(nums[j]);
                        u.add(nums[l]);
                        u.add(nums[r]);
                        if (!ans.contains(u))
                            ans.add(u);
                        l++;
                        r--;
                    }else if (nums[l]+nums[r]<target-s12){
                        l++;
                    }else{
                        r--;
                    }
                }
            }
        }
        return ans;
    }
}
