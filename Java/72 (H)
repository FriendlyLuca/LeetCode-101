class Solution {
    public int minDistance(String word1, String word2) {
        int[][] dp=new int[word1.length()+1][word2.length()+1];//dp[0][0]表示两个字符串为空。否则的话，直接比较第一位则会让第一位只能replace 不能insert 或delete
        char[] w1=word1.toCharArray();
        char[] w2=word2.toCharArray();
        dp[0][0]=0;
        for (int i=1;i<=word1.length();i++){
            dp[i][0]=dp[i-1][0]+1;
        }
        for (int j=1;j<=word2.length();j++){
            dp[0][j]=dp[0][j-1]+1;
        }
        for (int i=1;i<=word1.length();i++){
            for (int j=1;j<=word2.length();j++){
                if (w1[i-1]==w2[j-1]){
                    dp[i][j]=dp[i-1][j-1];
                }else{//当当前两个字符不同时，选择insert,delete,repolace 中最小的一种方法
                    int in=dp[i][j-1]+1;
                    int del=dp[i-1][j]+1;
                    int rep=dp[i-1][j-1]+1;
                    dp[i][j]=in<del?(in<rep?in:rep):(del<rep?del:rep);
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}
