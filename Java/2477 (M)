class Solution {
    long cars=0;//总汽油数
    public long minimumFuelCost(int[][] roads, int seats) {
        ArrayList<Integer>[] r=new ArrayList[roads.length+1];
        for (int i=0;i<r.length;i++){
            r[i]=new ArrayList<Integer>();
        }
        for (int i=0;i<roads.length;i++){
            r[roads[i][0]].add(roads[i][1]);
            r[roads[i][1]].add(roads[i][0]);
        }
        int[] visit=new int[roads.length+1];
        visit[0]=1;
        for (int next:r[0]){//由于f算的是当前节点总量到父节点那一段路所消耗的油，所以不能从0开始而是要从它的子节点开始
            visit[next]=1;
            f(r,next,visit,seats);
        }
        return cars;
    }
    private long f(ArrayList<Integer>[] r,int index,int[] visit,int seat){
        long num=1;
        for (int next:r[index]){
            if (visit[next]==0){
                visit[next]=1;
                num+=f(r,next,visit,seat);
            }
        }
        cars+=num/seat;//每次循环仅考虑现在总乘客量到其父节点那一段路的油
        if (num%seat>0)
            cars++;
        return num;
    }
}
