class Solution {//递归
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        int leftmost=root.val;
        q.offer(root);
        while(!q.isEmpty()){
            int size=q.size();
            for (int i=0;i<size;i++){
                TreeNode node=q.poll();
                if (i==0){
                    leftmost=node.val;
                }
                if (node.left!=null)
                    q.offer(node.left);
                if (node.right!=null)
                    q.offer(node.right);
            }
        }
        return leftmost;
    }
}
/****************************************************************/
class Solution {//迭代，时间更快
    int maxD=0;
    int leftmost;
    public int findBottomLeftValue(TreeNode root) {
        Dep(root,1);
        return leftmost;
    }
    private void Dep(TreeNode root,int dep){
        if (root.left==null&&root.right==null){//遇到叶子节点时判断是否为最大深度并返回
            if (dep>maxD){
                maxD=dep;
                leftmost=root.val;
            }
            return;
        }
        if (root.left!=null){
            Dep(root.left,dep+1);
        }
        if (root.right!=null){
            Dep(root.right,dep+1);
        }
        return;
    }
}
