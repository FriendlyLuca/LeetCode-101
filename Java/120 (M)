class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] dp=new int[triangle.size()][triangle.size()];
        if (triangle.size()==1)//否则dp[1]直接溢出了
            return triangle.get(0).get(0);
        dp[0][0]=triangle.get(0).get(0);
        dp[1][0]=triangle.get(1).get(0)+dp[0][0];
        dp[1][1]=triangle.get(1).get(1)+dp[0][0];
        for (int i=2;i<triangle.size();i++){
            dp[i][0]=triangle.get(i).get(0)+dp[i-1][0];
            dp[i][i]=triangle.get(i).get(i)+dp[i-1][i-1];
            for (int j=1;j<i;j++){
                dp[i][j]=triangle.get(i).get(j)+Math.min(dp[i-1][j-1],dp[i-1][j]);
            }
        }
        int layer=triangle.size();
        int min=dp[layer-1][0];
        for (int i=0;i<layer;i++){
            if (min>dp[layer-1][i]){
                min=dp[layer-1][i];
            }
        }
        return min;
    }
}
