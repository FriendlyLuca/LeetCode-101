class Solution {
    public boolean isValidSudoku(char[][] board) {
        for (int i=0;i<9;i++){
            if (isV_3x3(board,i)&&isV_c(board,i)&&isV_r(board,i)){
                continue;
            }else{
                return false;
            }
        }
        return true;
    }
    private boolean isV_3x3(char[][] board,int index){
        int x=index/3*3;
        int y=index%3*3;
        HashSet<Character> hs=new HashSet<Character>();
        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                char c=board[x+i][y+j];
                if (c=='.'){
                    continue;
                }
                if (hs.contains(c)){
                    return false;
                }else{
                    hs.add(c);
                }
            }
        }
        return true;
    }
    private boolean isV_r(char[][] board,int x){
        HashSet<Character> hs=new HashSet<Character>();
        for (int i=0;i<9;i++){
            char c=board[x][i];
            if (c=='.')
                continue;
            if (hs.contains(c)){
                return false;
            }else{
                hs.add(c);
            }
        }
        return true;
    }
    private boolean isV_c(char[][] board,int y){
        HashSet<Character> hs=new HashSet<Character>();
        for (int i=0;i<9;i++){
            char c=board[i][y];
            if (c=='.')
                continue;
            if (hs.contains(c)){
                return false;
            }else{
                hs.add(c);
            }
        }
        return true;
    }
}
